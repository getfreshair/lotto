server:
  port: 8081

spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/sqllotto
    username: lotto
    password: sadang
    driver-class-name: org.postgresql.Driver
    sql-script-encoding: UTF-8 #data.sql에서 인코딩 설정
    platform : postgresql
    initialization-mode: never #spring.datasource.initialization-mode를 alwasy로 설정해야 외장 DB 초기화 가능
                               #설정하지 않으면 기본으로 never로 설정: Embedded DB 사용 -> ex) HSQL, H2, Derby
                               #spring.datasource.data에 sql 파일 경로를 지정하면 지정된 파일의 스크립트를 실행
                               #ex) spring.datasource.data=classpath:member.sql, book.sql
                               #기본값은 classpath:schema.sql, classpath:data.sql
                               #DB 종류에 따라 다른 스크립트를 사용하려면 spring.datasource.platform을 해당 DB종류(ex. mysql, posgresql)로 설정하고 
                               #schema-mysql.sql, data-mysql.sql과 같이 사용
                               #해당 기능은 spring boot version 별로 약간의 차이가 있음
  jpa:
    hibernate:
      ddl-auto: update #(create, create-drop, validate, update)
                       #create : JPA가 DB와 상호작용할 때 기존에 있던 스키마(테이블)을 삭제하고 새로 만드는 것을 뜻합니다.
                       #create-drop : JPA 종료 시점에 기존에 있었던 테이블을 삭제합니다.
                       #update : JPA에 의해 변경된 부분만 반영합니다.
                       #validate : 엔티티와 테이블이 정상 매핑되어 있는지만 검증합니다.
                       #none : 초기화 동작을 사용하지 않습니다.
                       #개발 상태에서는 update, 운영 상태에서는 validate
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        dialect : org.hibernate.dialect.PostgreSQLDialect
        temp : 
          use_jdbc_metadata_defaults: false
  thymeleaf:
    cache: false
    check-template: true
    check-template-location: true
    enabled: true
    encoding: UTF-8
    prefix: classpath:/templates/ # prefix의 기본 경로가 classpath:/templates/
    suffix: .html # suffix의 기본 설정이 .html

logging:
  level:
    org.hibernate.SQL: debug
    org.hibernate.type: trace